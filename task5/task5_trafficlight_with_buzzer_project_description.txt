This Traffic Light System with Buzzer is implemented using the CH32V003 microcontroller. It controls three LEDs (Red, Yellow, Green) and a Buzzer to simulate a real traffic signal. The buzzer beeps when the yellow light turns on, indicating a transition phase.

üõ†Ô∏è Hardware Setup
1Ô∏è‚É£ Components Required
Component	Quantity
CH32V003 Board	1
Red LED (STOP)	1
Yellow LED (READY)	1
Green LED (GO)	1
Resistors (220Œ© for LEDs)	3
Buzzer (Active or Passive)	1
Resistor (1kŒ© for buzzer, optional)	1
Breadboard & Jumper Wires	-
2Ô∏è‚É£ Pin Connections
Component	CH32V003 Pin	Connection Details
Red LED	PC0	Connect one leg to PC0, the other to GND via 220Œ© resistor
Yellow LED	PC1	Connect one leg to PC1, the other to GND via 220Œ© resistor
Green LED	PC2	Connect one leg to PC2, the other to GND via 220Œ© resistor
Buzzer	PC3	Connect one leg to PC3, the other to GND via 1kŒ© resistor (optional)
üìú Code Breakdown
The following code is written in C and runs on CH32V003.

1Ô∏è‚É£ Code Structure
c
Copy
Edit
#include <ch32v00x.h>  // CH32V003 hardware headers
#include <system_ch32v00x.h>

// Define LED and Buzzer pins
#define RED_LED GPIO_Pin_0    
#define YELLOW_LED GPIO_Pin_1 
#define GREEN_LED GPIO_Pin_2  
#define BUZZER GPIO_Pin_3     

void delay_ms(uint32_t ms) {
    for (volatile uint32_t i = 0; i < ms * 8000; i++) {
        __NOP();  // Ensures delay
    }
}
Includes necessary libraries for CH32V003.
Defines LED and Buzzer pins for easy modification.
Creates a simple delay function using __NOP() to create software delay.
2Ô∏è‚É£ GPIO Initialization
c
Copy
Edit
void TrafficLight_Init() {
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);  // Enable GPIOC clock

    GPIO_InitTypeDef GPIO_InitStruct;
    GPIO_InitStruct.GPIO_Pin = RED_LED | YELLOW_LED | GREEN_LED | BUZZER;
    GPIO_InitStruct.GPIO_Mode = GPIO_Mode_Out_PP;  // Push-Pull Output
    GPIO_InitStruct.GPIO_Speed = GPIO_Speed_10MHz;
    GPIO_Init(GPIOC, &GPIO_InitStruct);
}
Enables GPIOC Clock to use PC0, PC1, PC2, and PC3.
Configures the GPIO Pins as Output with GPIO_Mode_Out_PP (Push-Pull Output).
Sets speed to 10MHz, which is enough for LED control.
3Ô∏è‚É£ Buzzer Beeping Function
c
Copy
Edit
void beep_buzzer(uint32_t duration) {
    GPIO_SetBits(GPIOC, BUZZER);
    delay_ms(duration);
    GPIO_ResetBits(GPIOC, BUZZER);
    delay_ms(200);
}
Turns ON the buzzer, waits for duration milliseconds, then turns it OFF.
Adds a 200ms delay before the next beep.
4Ô∏è‚É£ Traffic Light Logic
c
Copy
Edit
void TrafficLight_Run() {
    while (1) {
        // RED ON (STOP) - 5 seconds
        GPIO_SetBits(GPIOC, RED_LED);
        GPIO_ResetBits(GPIOC, YELLOW_LED | GREEN_LED | BUZZER);
        delay_ms(5000);

        // YELLOW ON (READY) + BUZZER ALERT - 2 seconds
        GPIO_SetBits(GPIOC, YELLOW_LED);
        GPIO_ResetBits(GPIOC, RED_LED | GREEN_LED);
        for (int i = 0; i < 3; i++) {  // Beep 3 times
            beep_buzzer(500);
        }
        delay_ms(2000);

        // GREEN ON (GO) - 5 seconds
        GPIO_SetBits(GPIOC, GREEN_LED);
        GPIO_ResetBits(GPIOC, RED_LED | YELLOW_LED | BUZZER);
        delay_ms(5000);
    }
}
Red Light (PC0) ON for 5s ‚Üí Stop.
Yellow Light (PC1) ON for 2s + Buzzer (PC3) Beeps 3 Times ‚Üí Warning.
Green Light (PC2) ON for 5s ‚Üí Go.
Repeats Continuously.
5Ô∏è‚É£ Main Function
c
Copy
Edit
int main(void) {
    SystemInit();  // Initialize system clock
    TrafficLight_Init();  // Initialize GPIOs
    TrafficLight_Run();  // Start Traffic Light System

    while (1);  // Keep running
}
Initializes System Clock and GPIOs.
Calls TrafficLight_Run() to start the traffic light cycle.
Runs infinitely inside while (1).
üõ†Ô∏è Uploading and Running
Step 1: Install Required Tools
Install PlatformIO in VS Code (For CH32V003 development).
Install CH32V003 SDK.
Step 2: Flash the Code
Open VS Code.
Create a new PlatformIO project.
Copy and paste the Traffic Light Code.
Connect your CH32V003 Board via USB-UART.
Run the Upload Command in PlatformIO.
Step 3: Observe the Output
Red LED Turns ON for 5s ‚Üí STOP.
Yellow LED + Buzzer Beeps for 2s ‚Üí READY.
Green LED Turns ON for 5s ‚Üí GO.
Repeats Continuously.
üîç Troubleshooting
Issue	Solution
LEDs not turning ON?	Check wiring connections and resistors.
Buzzer not working?	Ensure correct PC3 pin connection and use a 1kŒ© resistor if needed.
Code not uploading?	Reinstall PlatformIO, check USB-UART connection.
System stuck in PlatformIO debug mode?	Restart the board, try pio run -t upload in PlatformIO terminal.
üìå Enhancements
Add Pedestrian Crosswalk Signal.
Use Push Button to simulate manual control.
Implement PWM for buzzer instead of ON/OFF beeping.
üöÄ Final Thoughts
This Traffic Light System is a great beginner project for CH32V003, covering: ‚úÖ GPIO Output Control (LEDs & Buzzer)
‚úÖ Delay Handling (Software Delay)
‚úÖ Embedded C Programming

Let me know if you need modifications or additional features! üö¶üî•







You said:
please give me a discription about this project
ChatGPT said:
üö¶ Traffic Light System with Buzzer using CH32V003 ‚Äì Project Description
üîπ Project Overview
This project demonstrates a traffic light system with a buzzer, implemented using the CH32V003 microcontroller. The system controls three LEDs (Red, Yellow, and Green) to simulate a real traffic signal. Additionally, a buzzer is included to alert vehicles and pedestrians when the yellow light is active, signaling a transition between stop and go.

The traffic light operates on a fixed time cycle, where:

Red LED (STOP) ‚Üí Lights up for 5 seconds.
Yellow LED (READY) + Buzzer ‚Üí Lights up for 2 seconds, with the buzzer beeping three times to warn drivers.
Green LED (GO) ‚Üí Lights up for 5 seconds.
This sequence repeats continuously, mimicking real-world traffic control systems.

üîπ Objectives
To simulate a basic traffic light system using an embedded system.
To understand GPIO control for LEDs and a buzzer.
To implement delays for timing control.
To enhance real-world applications by adding a buzzer warning system.
üîπ Components Required
Component	Quantity	Description
CH32V003 Microcontroller Board	1	Main control unit
Red LED	1	Represents STOP
Yellow LED	1	Represents READY
Green LED	1	Represents GO
Buzzer	1	Alerts during yellow light
Resistors (220Œ© for LEDs)	3	Current limiting for LEDs
Resistor (1kŒ© for buzzer, optional)	1	Reduces noise in the buzzer
Breadboard & Jumper Wires	-	For circuit connections
üîπ Working Principle
Microcontroller Initialization:

Configures GPIO pins as output for LEDs and the buzzer.
Enables system clock for smooth operation.
Traffic Light Operation:

Red LED (STOP) ON for 5s ‚Üí Vehicles must stop.
Yellow LED (READY) ON for 2s + Buzzer Beeps ‚Üí Warning before green.
Green LED (GO) ON for 5s ‚Üí Vehicles can move.
Cycle repeats continuously.
Buzzer Functionality:

The buzzer beeps three times during the yellow light phase.
This alerts drivers about the transition to the next signal.
üîπ Circuit Diagram (Connections)
Component	CH32V003 Pin	Connection
Red LED	PC0	One leg to PC0, other to GND (via 220Œ© resistor)
Yellow LED	PC1	One leg to PC1, other to GND (via 220Œ© resistor)
Green LED	PC2	One leg to PC2, other to GND (via 220Œ© resistor)
Buzzer	PC3	One leg to PC3, other to GND (via 1kŒ© resistor, optional)
üîπ Software Implementation
The CH32V003 microcontroller runs embedded C code, controlling LEDs and the buzzer in a time-sequenced manner.

GPIO Initialization:

Configures PC0, PC1, PC2 for LED control.
Configures PC3 for Buzzer control.
Delay Function:

Uses a software-based delay (__NOP()) to create time intervals.
Buzzer Alert System:

Beeps three times when the yellow LED is ON.
Main Loop:

Red LED ON ‚Üí Delay 5s
Yellow LED ON + Buzzer ‚Üí Delay 2s (with beeping)
Green LED ON ‚Üí Delay 5s
Repeat cycle infinitely
üîπ Advantages
‚úÖ Real-World Simulation ‚Äì Mimics actual traffic light systems.
‚úÖ Buzzer for Safety ‚Äì Alerts vehicles and pedestrians before light changes.
‚úÖ Low Power Consumption ‚Äì Efficient operation using CH32V003.
‚úÖ Scalability ‚Äì Can be expanded with pedestrian signals or sensors.

üîπ Future Enhancements
üöÄ Add a Pedestrian Button ‚Äì Allow pedestrians to trigger the signal change.
üöÄ Use PWM for Buzzer ‚Äì Control buzzer tone dynamically.
üöÄ Use Sensors for Traffic Control ‚Äì Implement an adaptive system based on real traffic conditions.

üîπ Conclusion
This Traffic Light System with Buzzer using CH32V003 is an excellent beginner-level embedded systems project. It teaches GPIO control, delay management, and real-world signal logic implementation. The buzzer feature improves safety, making the system more practical for real-life applications. üö¶